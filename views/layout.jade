doctype html
html
	head
		title= title
		link(rel='stylesheet', href='//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css')
		link(rel='stylesheet', href='/stylesheets/style.css')

		script(src='//code.jquery.com/jquery-1.8.2.min.js')
		script(src='//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js')

		script.
			if( typeof(CCPEVE) != 'undefined') CCPEVE.requestTrust('http://localhost:8080')		
			//poly fills for IGB
			if (!Object.keys) { 
				Object.keys = (function () {
					'use strict';
					var hasOwnProperty = Object.prototype.hasOwnProperty,
						hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),
						dontEnums = [
							'toString',
							'toLocaleString',
							'valueOf',
							'hasOwnProperty',
							'isPrototypeOf',
							'propertyIsEnumerable',
							'constructor'
						],
						dontEnumsLength = dontEnums.length;

					return function (obj) {
						if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
							throw new TypeError('Object.keys called on non-object');
						}

						var result = [], prop, i;

						for (prop in obj) {
							if (hasOwnProperty.call(obj, prop)) {
								result.push(prop);
							}
						}

						if (hasDontEnumBug) {
							for (i = 0; i < dontEnumsLength; i++) {
								if (hasOwnProperty.call(obj, dontEnums[i])) {
								result.push(dontEnums[i]);
								}
							}
						}
						return result;
					};
				}());
			}
	body
		block content
