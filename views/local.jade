mixin render_alliances_graph(alliances, alliance_names, counts, ids)
	- var chart_id = locals.uuid()
	center
		.well.well-sm
			div(id=chart_id, width="500px", height="500px")

	script(src='//code.highcharts.com/highcharts.js')

	script.
		$(function () { 
			function ColorLuminance(hex, lum) {

				// validate hex string
				hex = String(hex).replace(/[^0-9a-f]/gi, '');
				if (hex.length < 6) {
					hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
				}
				lum = lum || 0;

				// convert to decimal and change luminosity
				var rgb = "#", c, i;
				for (i = 0; i < 3; i++) {
					c = parseInt(hex.substr(i*2,2), 16);
					c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
					rgb += ("00"+c).substr(c.length);
				}

				return rgb;
			}			
			var counts = !{JSON.stringify(counts)},
				sorted_alliance_names = !{JSON.stringify(alliance_names)},
				alliances = !{JSON.stringify(alliances)},
				colors = Highcharts.getOptions().colors;
			function create_chart(div_id) {
				var alliance_data = [];
				var corp_data = [];
				var total_corps_rendered = 0;
				for( var alliance_idx in sorted_alliance_names) {
					var alliance = sorted_alliance_names[alliance_idx];
					if( alliance_idx < colors.length) {
						var total_corps_rendered = 0;
						alliance_data.push( {
							name:(alliance_idx == colors.length - 1 ? "Other" : alliance),
							y:counts.alliances[alliance],
							color:colors[alliance_idx % colors.length]
						});
					} else {
						alliance_data[alliance_data.length-1].y = alliance_data[alliance_data.length-1].y + counts.alliances[alliance]
					}
					var alliance_color = alliance_data[alliance_data.length-1].color;

					var corps = alliances[alliance];
					var corp_names = Object.keys(corps);
					var max_corps_rendered = colors.length;

					corp_names.sort(function(a,b) { return counts.corps[a] < counts.corps[b] ? 1 : (counts.corps[a] == counts.corps[b] ? a.localeCompare(b) : -1) })
					for( var corp_idx in corp_names) {
						var corp_name = corp_names[corp_idx];
						if( total_corps_rendered < max_corps_rendered) {
							corp_data.push( {
								name:(total_corps_rendered >= max_corps_rendered - 1 ? "Other" : corp_name),
								y: counts.corps[corp_name],
								color:ColorLuminance(alliance_color,.6*total_corps_rendered/colors.length)
							});
							total_corps_rendered++;
						} else {
							corp_data[corp_data.length-1].y = corp_data[corp_data.length-1].y + counts.corps[corp_name]
						}
					}
				}

				// Create the chart
				var chart;
				$(document).ready(function() {
					chart = new Highcharts.Chart({
						chart: {
							type: 'pie',
							renderTo:div_id,
							shadow: true,
							spacing: [0,5,5,5],
							margin: [0,0,0,0],
							height:500,
							width:1024
						},
						yAxis: {
							title: {
								text: 'Total percent market share'
							}
						},
						title: {
							text:''
						},
						plotOptions: {
							pie: {
								shadow: false,
								center: ['50%', '50%']
							},
						},
						tooltip: {
							valueSuffix: ' ',
							formatter: function() {
								var output = "<div style='background:white;padding:5px'>" + this.key + ": " + this.y
								// total, percentage, point, series, key, x, y

								return output
							},
							useHTML: true
						},
						series: [{
							name: 'Pilots',
							data: alliance_data,
							size: '60%',
							dataLabels: {
								formatter: function() {
									return  '<b>'+ this.point.name +':</b> '+ this.y + ' Pilot' + (this.y > 1 ? 's' : '' );
								},
								color: 'white',
								distance: -50
							}
						}, {
							name: 'Pilots',
							data: corp_data,
							size: '80%',
							innerSize: '60%',
							dataLabels: {
								formatter: function() {
									return  '<b>'+ this.point.name +':</b> '+ this.y + ' Pilot' + (this.y > 1 ? 's' : '' );
								}
							}
						}]
					});
				});
			};

			create_chart('#{chart_id}')
		});

mixin render_pilot(pilot, pilot_id)
	tr
		td
			= pilot
		td
			a(href="https://zkillboard.com/character/#{pilot_id}") zKb
		td
			a(href="http://evewho.com/pilot/#{encodeURIComponent(pilot)}") evewho
		td
			a(href="http://eve-search.com/search/author/#{encodeURIComponent(pilot)}") search

mixin render_alliances_table(alliances, alliance_names, counts, ids)
	#accordian.panel-group
		each alliance in alliance_names
			- var alliance_uuid = locals.uuid()
			.row
				.col-md-12
					.panel.panel-success
						.panel-heading
							
							a(href="##{alliance_uuid}", data-toggle="collapse", data-parent="#accordian")
								span.glyphicon.glyphicon-chevron-right
								= alliance 
								span.badge.pull-right= counts.alliances[alliance]
						- var corp_names = Object.keys(alliances[alliance])
						- corp_names.sort(function(a,b) { return counts.corps[a] < counts.corps[b] ? 1 : (counts.corps[a] == counts.corps[b] ? a.localeCompare(b) : -1) })
						.panel-collapse.collapse(id="#{alliance_uuid}")
							each corp in corp_names
								- var corp_uuid = locals.uuid()
								.row
									.col-md-10.col-md-offset-2
										.panel.panel-info
											.panel-heading
												
												a(href="##{corp_uuid}", data-toggle="collapse", data-parent="#accordian")
													span.glyphicon.glyphicon-chevron-right
													= corp 
													span.badge.pull-right= counts.corps[corp]
											- var pilots = alliances[alliance][corp]
											- pilots.sort()
											.panel-collapse.collapse(id="#{corp_uuid}")
												table.table.table-striped
													tbody
														each pilot in pilots
															+render_pilot(pilot, ids[pilot])


mixin render_alliances(alliances, unaligned, counts, ids)
	- var alliance_names = Object.keys(alliances)
	- alliance_names.sort( function(a,b) { return counts.alliances[a] < counts.alliances[b] ? 1 : (counts.alliances[a] == counts.alliances[b] ? a.localeCompare(b) : -1) } )
	- var unaligned_corps = Object.keys(unaligned)
	- if( unaligned_corps.length > 1 ) { 
	-	alliance_names.push( "Unaligned" );
	- 	alliances["Unaligned"] = unaligned
	- 	var count = unaligned_corps.reduce( function( p, c, i, a ) { return p + counts.corps[c] }, 0)
	- 	counts.alliances["Unaligned"] = count
	-}

	+render_alliances_graph( alliances, alliance_names, counts, ids )

	+render_alliances_table( alliances, alliance_names, counts, ids )

mixin render_coalition(my_alliance_name, coalitions, alliances, unaligned, counts, ids)
	-var my_coalition = []
	-var render_name = my_alliance_name
	each alliances, coalition in coalitions
		each alliance, i in alliances
			if my_alliance_name == alliance
				-my_coalition = coalitions[coalition]
				-render_name = coalition
	-my_coalition.push(my_alliance_name)
	-var my_alliance = {}
	each alliance, i in my_coalition
		if alliance in alliances
			-my_alliance[alliance] = alliances[alliance]
			-delete alliances[alliance]		
	if Object.keys(my_alliance).length == 0
		+render_alliances(alliances, unaligned, counts, ids)
	else
		ul.nav.nav-tabs
			if Object.keys(locals.scan.alliances).length > 0
				li.active
					a(href="#Others", data-toggle="tab") Others
				li
					a(href="#MyAlliance", data-toggle="tab")=render_name
			else					
				li.active
					a(href="#MyAlliance", data-toggle="tab")=render_name

		.tab-content
			if Object.keys(locals.scan.alliances).length > 0
				.tab-pane.active(id='Others')
					+render_alliances(locals.scan.alliances, locals.scan.unaligned, locals.scan.counts, locals.scan.ids)
				.tab-pane(id="MyAlliance")
					+render_alliances(my_alliance, {}, locals.scan.counts, locals.scan.ids)
			else
				.tab-pane.active(id="MyAlliance")
						+render_alliances(my_alliance, {}, locals.scan.counts, locals.scan.ids)


mixin local()
	#base
		-var date = locals.scan.metadata.scan_date
		-var date_string = date.toUTCString().replace("GMT", "EVE")
		if locals.scan.metadata.solarsystemname
			.well.well-sm Local scan for #{locals.scan.metadata.solarsystemname} at #{date_string}
		if locals.request.headers.eve_alliancename
			-var my_alliance_name = locals.request.headers.eve_alliancename
			+render_coalition(my_alliance_name, locals.scan.coalitions, locals.scan.alliances, locals.scan.unaligned, locals.scan.counts, locals.scan.ids)
		else
			+render_alliances(locals.scan.alliances, locals.scan.unaligned, locals.scan.counts, locals.scan.ids)